import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import mysql.connector
from PIL import Image, ImageTk
import os

class BaseTab(tk.Frame):
    def __init__(self, parent, db_config, table_name, columns, column_names):
        super().__init__(parent)
        self.db_config = db_config
        self.table_name = table_name
        self.columns = columns
        self.column_names = column_names
        self.create_widgets()

    def create_widgets(self):
        self.configure(bg='#f0f0f0')

        # Frame para la imagen
        self.image_frame = tk.Frame(self, bg='#f0f0f0')
        self.image_frame.pack(side=tk.TOP, padx=10, pady=10)

        # Label para mostrar la imagen
        self.image_label = tk.Label(self.image_frame, bg='#f0f0f0')
        self.image_label.pack()

        # Marco para la información
        info_frame = tk.LabelFrame(self, text=f"Información de {self.table_name.capitalize()}", padx=10, pady=10, bg='#e0e0e0', font=('Arial', 12))
        info_frame.pack(padx=10, pady=10, fill=tk.X)

        # Entradas de información
        self.entries = []
        for i, column_name in enumerate(self.column_names):
            tk.Label(info_frame, text=f"{column_name}:", padx=5, pady=5, bg='#e0e0e0').grid(row=i, column=0, sticky="e")
            entry = tk.Entry(info_frame, width=30)
            entry.grid(row=i, column=1, padx=5, pady=5, sticky="ew")
            self.entries.append(entry)

        # Botones de acción
        button_frame = tk.Frame(info_frame, bg='#e0e0e0')
        button_frame.grid(row=len(self.column_names), column=0, columnspan=2, pady=10)

        tk.Button(button_frame, text="Cargar Imagen", command=self.load_image, bg='#4CAF50', fg='white').pack(side=tk.LEFT, padx=5)
        tk.Button(button_frame, text="Buscar ID", command=self.search_by_id, bg='#2196F3', fg='white').pack(side=tk.LEFT, padx=5)
        tk.Button(button_frame, text="Crear", command=self.create, bg='#2196F3', fg='white').pack(side=tk.LEFT, padx=5)
        tk.Button(button_frame, text="Actualizar", command=self.update, bg='#FFC107', fg='black').pack(side=tk.LEFT, padx=5)
        tk.Button(button_frame, text="Eliminar", command=self.delete, bg='#F44336', fg='white').pack(side=tk.LEFT, padx=5)

        # Tabla para mostrar los datos
        self.tree = ttk.Treeview(self, columns=self.columns, show="headings")
        for column in self.columns:
            self.tree.heading(column, text=column)
        self.tree.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        self.load_data()
        self.tree.bind('<<TreeviewSelect>>', self.on_select)

    def on_select(self, event):
        selected_item = self.tree.selection()
        if selected_item:
            item = self.tree.item(selected_item)
            record = item['values']
            self.populate_fields(record)
            self.show_image(record[-1])  # Suponiendo que la imagen está en la última columna

    def show_image(self, image_path):
        if image_path and os.path.exists(image_path):
            try:
                img = Image.open(image_path)
                img = img.resize((150, 150), Image.LANCZOS)  # Tamaño más grande
                self.img_tk = ImageTk.PhotoImage(img)
                self.image_label.config(image=self.img_tk)
                self.image_label.image = self.img_tk
            except Exception as e:
                messagebox.showerror("Error", f"No se pudo cargar la imagen: {e}")

    def load_image(self):
        file_path = filedialog.askopenfilename(title="Seleccionar Imagen", filetypes=[("Image files", "*.jpg;*.jpeg;*.png;*.gif")])
        if file_path:
            file_path = os.path.abspath(file_path)  # Convertir a ruta absoluta
            selected_item = self.tree.selection()
            if selected_item:
                current_values = list(self.tree.item(selected_item)['values'])  # Convertir a lista
                updated_values = current_values[:-1] + [file_path]  # Cambiar a lista para concatenar
                self.tree.item(selected_item, values=updated_values)
                self.show_image(file_path)  # Mostrar la imagen de inmediato

                # Actualizar la base de datos con la nueva ruta de imagen
                self.update_image_in_db(current_values[0], file_path)  # Asumiendo que el ID es el primer valor
                messagebox.showinfo("Éxito", f"Imagen cargada: {file_path}")

    def update_image_in_db(self, record_id, image_path):
        try:
            connection = mysql.connector.connect(**self.db_config)
            cursor = connection.cursor()
            query = f"UPDATE {self.table_name} SET imagen = %s WHERE id = %s"
            cursor.execute(query, (image_path, record_id))
            connection.commit()
        except mysql.connector.Error as error:
            messagebox.showerror("Error", f"Error al actualizar la imagen en la base de datos: {error}")
        finally:
            if connection.is_connected():
                cursor.close()
                connection.close()

    def search_by_id(self):
        record_id = self.entries[0].get()
        if not record_id:
            messagebox.showwarning("Advertencia", "Por favor, ingrese un ID para buscar.")
            return

        try:
            connection = mysql.connector.connect(**self.db_config)
            cursor = connection.cursor()

            query = f"SELECT * FROM {self.table_name} WHERE id = %s"
            cursor.execute(query, (record_id,))
            record = cursor.fetchone()

            if record:
                self.populate_fields(record)
                self.show_image(record[-1])  # Suponiendo que la imagen está en la última columna
            else:
                messagebox.showinfo("Información", f"No se encontró un registro con ese ID en {self.table_name}.")
        except mysql.connector.Error as error:
            messagebox.showerror("Error", f"Error al buscar {self.table_name}: {error}")
        finally:
            if connection.is_connected():
                cursor.close()
                connection.close()

    def populate_fields(self, record):
        for i, value in enumerate(record):
            self.entries[i].delete(0, tk.END)
            self.entries[i].insert(0, value)

    def create(self):
        values = [entry.get() for entry in self.entries[1:]]
        if any(not value for value in values):
            messagebox.showwarning("Advertencia", "Por favor, complete todos los campos requeridos.")
            return

        try:
            connection = mysql.connector.connect(**self.db_config)
            cursor = connection.cursor()

            query = f"INSERT INTO {self.table_name} ({', '.join(self.columns[1:])}) VALUES ({', '.join(['%s'] * len(values))})"
            cursor.execute(query, tuple(values))
            connection.commit()
            messagebox.showinfo("Éxito", f"Registro creado con éxito en {self.table_name}.")
            self.load_data()
        except mysql.connector.Error as error:
            messagebox.showerror("Error", f"Error al crear registro en {self.table_name}: {error}")
        finally:
            if connection.is_connected():
                cursor.close()
                connection.close()

    def read(self):
        self.search_by_id()

    def update(self):
        record_id = self.entries[0].get()
        values = [entry.get() for entry in self.entries[1:]]
        if not record_id or any(not value for value in values):
            messagebox.showwarning("Advertencia", "Por favor, complete todos los campos requeridos.")
            return

        try:
            connection = mysql.connector.connect(**self.db_config)
            cursor = connection.cursor()

            query = f"UPDATE {self.table_name} SET {', '.join([f'{col} = %s' for col in self.columns[1:]])} WHERE id = %s"
            cursor.execute(query, tuple(values) + (record_id,))
            connection.commit()
            messagebox.showinfo("Éxito", f"Registro actualizado en {self.table_name}.")
            self.load_data()
        except mysql.connector.Error as error:
            messagebox.showerror("Error", f"Error al actualizar registro en {self.table_name}: {error}")
        finally:
            if connection.is_connected():
                cursor.close()
                connection.close()

    def delete(self):
        selected_item = self.tree.selection()
        if not selected_item:
            messagebox.showwarning("Advertencia", "Por favor, seleccione un registro para eliminar.")
            return

        record_id = self.tree.item(selected_item)['values'][0]
        try:
            connection = mysql.connector.connect(**self.db_config)
            cursor = connection.cursor()

            query = f"DELETE FROM {self.table_name} WHERE id = %s"
            cursor.execute(query, (record_id,))
            connection.commit()
            messagebox.showinfo("Éxito", f"Registro eliminado de {self.table_name}.")
            self.load_data()
        except mysql.connector.Error as error:
            messagebox.showerror("Error", f"Error al eliminar registro en {self.table_name}: {error}")
        finally:
            if connection.is_connected():
                cursor.close()
                connection.close()

    def load_data(self):
        try:
            connection = mysql.connector.connect(**self.db_config)
            cursor = connection.cursor()

            query = f"SELECT * FROM {self.table_name}"
            cursor.execute(query)
            records = cursor.fetchall()

            self.tree.delete(*self.tree.get_children())
            for record in records:
                self.tree.insert("", "end", values=record)

        except mysql.connector.Error as error:
            messagebox.showerror("Error", f"Error al cargar datos de {self.table_name}: {error}")
        finally:
            if connection.is_connected():
                cursor.close()
                connection.close()


class ServiceTypesTab(BaseTab):
    def __init__(self, parent, db_config):
        columns = ("ID", "Descripcion", "Coste")
        column_names = ["ID", "Descripcion", "Coste"]
        super().__init__(parent, db_config, "tipo_servicio", columns, column_names)


class MujeresTab(BaseTab):
    def __init__(self, parent, db_config):
        columns = ("ID", "Nombre", "Edad", "Coste", "Notas", "Imagen")
        column_names = ["ID", "Nombre", "Edad", "Coste", "Notas", "Imagen"]
        super().__init__(parent, db_config, "mujeres", columns, column_names)

        # Agregar el botón "Solicitar Servicio" en la parte superior derecha
        self.request_service_button = tk.Button(self, text="Solicitar Servicio", command=self.request_service, bg='#FF5722', fg='white')
        self.request_service_button.pack(side=tk.TOP, anchor='ne', padx=10, pady=10)  # Posición en la esquina superior derecha

    def request_service(self):
        selected_item = self.tree.selection()
        if not selected_item:
            messagebox.showwarning("Advertencia", "Por favor, seleccione un registro para solicitar el servicio.")
            return

        record = self.tree.item(selected_item)['values']
        # Aquí puedes agregar la lógica que deseas para solicitar el servicio
        messagebox.showinfo("Solicitud de Servicio", f"Solicitud realizada para: {record[1]}")  # Suponiendo que el nombre está en la segunda columna


class ClientesTab(BaseTab):
    def __init__(self, parent, db_config):
        columns = ("ID", "Nombre", "Telefono", "Email")
        column_names = ["ID", "Nombre", "Telefono", "Email"]
        super().__init__(parent, db_config, "clientes", columns, column_names)


class VentasTab(BaseTab):
    def __init__(self, parent, db_config):
        columns = ("ID", "id_mujer", "id_cliente", "fecha", "total")
        column_names = ["ID", "id_mujer", "id_cliente", "fecha", "total"]
        super().__init__(parent, db_config, "ventas", columns, column_names)


if __name__ == "__main__":
    root = tk.Tk()
    root.title("Gestión de Datos")
    root.geometry("800x600")

    db_config = {
        'user': 'root',
        'password': '1234',
        'host': 'localhost',
        'database': 'base_datos_mujeres'
    }

    notebook = ttk.Notebook(root)
    notebook.add(ServiceTypesTab(notebook, db_config), text="Tipos de Servicio")
    notebook.add(MujeresTab(notebook, db_config), text="Mujeres")
    notebook.add(ClientesTab(notebook, db_config), text="Clientes")
    notebook.add(VentasTab(notebook, db_config), text="Ventas")
    notebook.pack(fill=tk.BOTH, expand=True)

    root.mainloop()
